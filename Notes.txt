Session 1:

what problem does the system address?
what will it do?
who are the users?

break up the problem into its smallest components
decide on data structures, testing enviroment 

requirements gathering and analysis

Professor notes:
can one player make as many moves as they want before all the other players? or is there a round system 
where they have to wait for everybody to finish one take and discard

if players take indefinitely they can deplete a deck, which means they would have to wait for the other player to catch up and add more cards.
can a deck be empty?

what does card do?

Class PackReader -> no UI
has a static method with one parameter to read a file and return it -> gets the directory from CardGame class
throws an InvalidPack exception if the pack is not a plain text file, where each row contains a single non-negative integer
value, and has 8n rows
array list of integers (will need to be shuffled)

Tests:
Works with the right file type
fails with the wrong file type
file doesnt exist
empty file
file size != 8n
players is int
players is >= 2
file has negatives
file has decimals
file has characters
file has multiple numbers per line
returns an arrayList of same size as file
returns arrayList of type Card
returns arrayList of size 8n




CardGame
user input number of players (positive integer)
user input directory of pack, catches InvalidPack and prompts user for valid pack
creates n players, with name of player i
creates n decks, with name of deck i
creates cards from pack
distributes 4n cards, round robin to players from pack
distributes starting from 4n in the pack the remaining cards to the decks
would assign player.leftDeck and player.rightDeck values
creates player threads and starts them
listens for win event, prints to screen player x wins
terminates program

Card
getter and setter for an integer

Tests:

is not negative

Player
listens for win event, logs other players win, its own exit and its final hand
checks hand for 4 of a kind, if unanimous declare win event
loops through cards to discard, skips preferred (its i value) cards, so it eventually goes through every card.
logs wins, win events, draws, discards and current hand to an associated file
if the deck is empty player idles and listens for event from the deck

Listen for win event from game
Log win event or other players win event, exit and final hand
Loop -> starts with checking hand
then trys to draw and discard from left deck to right deck
then repeats until win event (from checking or listening)
Hand is an array size 4
held card for cache in draw and discard
the card that is discarded must looped over
after draw and discard log timestamp and hand as a tuple to an arrayList

Tests:
draw and discard from normal deck ends in hand
draw and discard from normal deck ends in right deck
2 draw and discards
5 draw and discards
draw and discard empty deck
draw and discard from upper bound deck

Mock starting hand with x111, run 10 cycles and see if any 1 is ever discarded.
Starting hand is all 1111
Send external win event to player, check if it logs it
Send internal win event to player, check if it logs it
check if on exit the thread is alive
check timestamp log is correct for 1 cycle
check timestamp log is correct for 3 cycles
check hand is reverted to hand before win event

CardDeck
input of a card and stores it in a queue
method to return top card
logs final contents
queue of cards
if the deck was empty when it next has a card it sends an event to the other player

Tests:
adding a card to the bottom of empty
adding a card to the bottom of non-empty
overflow adding

removing a card from a deck of size 1
remove a card from a deck upperbound
remove a card from an empty deck

outputting to a text file normal
outputting an empty deck to a text file
outputting lower bound
outputting upper bound


Win handler
needs a list of all players
takes the time of the win event
sends win event to all players, takes winning player as a parameter and win time
run by winning player


player 4 draws and discards then has winning hand call winhandler
winhandler will tell all the players player 4 has won
in this time player 1 has draw and discarded twice
player 2 has draw and discarded once
and player 3 has done nothing
when player 1 and player 2 print their output file it will have the wrong final hand
player 3 and 4 will have the correct one
